#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –ü–µ—Ä—É–∫—É–∞ - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Notion API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ OpenAI API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
"""

import os
import logging
import asyncio
from datetime import datetime
from typing import Optional, Dict, Any

from telegram import Update, Message
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes
)

from config import Config
from notion_api import NotionAPI
from openai_api import OpenAIAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class PerukuaBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è –ü–µ—Ä—É–∫—É–∞"""
    
    def __init__(self):
        self.config = Config()
        self.notion = NotionAPI()
        self.openai = OpenAIAPI()
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
üåü –ü—Ä–∏–≤–µ—Ç, –ü–µ—Ä—É–∫—É–∞! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏.

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Ç–≤–æ–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–º—ã—Å–ª—ã
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ - –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º. –Ø –ø–æ–π–º—É, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å, –∏ –æ—Ä–≥–∞–Ω–∏–∑—É—é –≤—Å—ë –∑–∞ —Ç–µ–±—è.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/projects - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
/active - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
/help - –ø–æ–º–æ—â—å

–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å? –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö –∏–¥–µ—è—Ö! ‚ú®
        """
        await update.message.reply_text(welcome_message)
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üîÆ –ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:

üìù **–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤:**
–ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–µ–π –∏–¥–µ–µ:
‚Ä¢ "–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è –¥–ª—è –Ω–æ–≤–æ–π –ø–µ—Å–Ω–∏ –æ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–µ"
‚Ä¢ "–•–æ—á—É —Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å –ø–æ –∂–µ–Ω—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏"
‚Ä¢ "–ü–ª–∞–Ω–∏—Ä—É—é —Ä–µ—Ç—Ä–∏—Ç –≤ –≥–æ—Ä–∞—Ö"

üìä **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:**
‚Ä¢ "–ù–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø–µ—Å–Ω–µ–π –æ –ª—É–Ω–µ"
‚Ä¢ "–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∫—É—Ä—Å–æ–º"
‚Ä¢ "–ó–∞–≤–µ—Ä—à–∏–ª–∞ –∑–∞–ø–∏—Å—å –∞–ª—å–±–æ–º–∞"

üìã **–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤:**
‚Ä¢ "–ß—Ç–æ —É –º–µ–Ω—è –≤ —Ä–∞–±–æ—Ç–µ?"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –º–æ–∏ –ø–µ—Å–Ω–∏"
‚Ä¢ "–ö–∞–∫–∏–µ –∫—É—Ä—Å—ã —è –ø–ª–∞–Ω–∏—Ä—É—é?"

üéØ **–¢–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:**
‚Ä¢ –ü–µ—Å–Ω–∏ (Song)
‚Ä¢ –ö–Ω–∏–≥–∏ (Book)
‚Ä¢ –ö—É—Ä—Å—ã (Course)
‚Ä¢ –†–µ—Ç—Ä–∏—Ç—ã (Retreat)
‚Ä¢ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã (Workshop)
‚Ä¢ –ê–ª—å–±–æ–º—ã (Album)

üí´ –ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ - —è –ø–æ–π–º—É —Ç–≤–æ–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –æ—Ä–≥–∞–Ω–∏–∑—É—é –≤—Å—ë —Å–∞–º–∞!
        """
        await update.message.reply_text(help_message)
        
    async def projects_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /projects - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"""
        try:
            projects = await self.notion.get_all_projects()
            
            if not projects:
                await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö –∏–¥–µ—è—Ö! ‚ú®")
                return
                
            message = "üåü **–í—Å–µ —Ç–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã:**\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —Ç–∏–ø–∞–º
            projects_by_type = {}
            for project in projects:
                project_type = project.get('type', '–î—Ä—É–≥–æ–µ')
                if project_type not in projects_by_type:
                    projects_by_type[project_type] = []
                projects_by_type[project_type].append(project)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            for project_type, type_projects in projects_by_type.items():
                message += f"**{project_type}:**\n"
                for project in type_projects:
                    name = project.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    status = project.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    status_emoji = self._get_status_emoji(status)
                    message += f"  {status_emoji} {name} - {status}\n"
                message += "\n"
                
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            
    async def active_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /active - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"""
        try:
            projects = await self.notion.get_projects_by_status("In Progress")
            
            if not projects:
                await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –í—Ä–µ–º—è –Ω–∞—á–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ! üöÄ")
                return
                
            message = "üî• **–¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:**\n\n"
            
            for project in projects:
                name = project.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                project_type = project.get('type', '–ü—Ä–æ–µ–∫—Ç')
                date = project.get('date', '')
                tags = project.get('tags', [])
                
                message += f"üéØ **{name}** ({project_type})\n"
                if date:
                    message += f"   üìÖ {date}\n"
                if tags:
                    message += f"   üè∑Ô∏è {', '.join(tags)}\n"
                message += "\n"
                
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            processing_msg = await update.message.reply_text("üé§ –°–ª—É—à–∞—é —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            voice_file = await update.message.voice.get_file()
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            voice_path = f"/tmp/voice_{update.message.message_id}.ogg"
            await voice_file.download_to_drive(voice_path)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            transcription = await self.openai.transcribe_audio(voice_path)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(voice_path)
            
            if not transcription:
                await processing_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            await processing_msg.edit_text(f"üìù –Ø —É—Å–ª—ã—à–∞–ª–∞: \"{transcription}\"\n\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
            await self._process_text_message(update, context, transcription, processing_msg)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º.")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            processing_msg = await update.message.reply_text("üí≠ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å...")
            
            text = update.message.text
            await self._process_text_message(update, context, text, processing_msg)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    
    async def _process_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  text: str, processing_msg: Message) -> None:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é OpenAI
            intent_analysis = await self.openai.analyze_intent(text)
            
            if not intent_analysis:
                await processing_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
                return
            
            action = intent_analysis.get('action')
            
            if action == 'create_project':
                await self._handle_create_project(intent_analysis, processing_msg)
            elif action == 'update_project':
                await self._handle_update_project(intent_analysis, processing_msg)
            elif action == 'query_projects':
                await self._handle_query_projects(intent_analysis, processing_msg)
            elif action == 'general_chat':
                await self._handle_general_chat(intent_analysis, processing_msg)
            else:
                await processing_msg.edit_text("–Ø –ø–æ–Ω—è–ª–∞ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –±—ã—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await processing_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    
    async def _handle_create_project(self, intent_analysis: Dict[str, Any], processing_msg: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            project_data = intent_analysis.get('project_data', {})
            
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç –≤ Notion
            created_project = await self.notion.create_project(project_data)
            
            if created_project:
                name = project_data.get('name', '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç')
                project_type = project_data.get('type', '–ü—Ä–æ–µ–∫—Ç')
                
                response = await self.openai.generate_response(
                    f"–ü—Ä–æ–µ–∫—Ç '{name}' —Ç–∏–ø–∞ '{project_type}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
                    "create_success"
                )
                
                await processing_msg.edit_text(f"‚ú® {response}")
            else:
                await processing_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            await processing_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
    
    async def _handle_update_project(self, intent_analysis: Dict[str, Any], processing_msg: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            project_name = intent_analysis.get('project_name')
            new_status = intent_analysis.get('new_status')
            
            if not project_name or not new_status:
                await processing_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –∏ –∫–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å. –£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ Notion
            updated = await self.notion.update_project_status(project_name, new_status)
            
            if updated:
                response = await self.openai.generate_response(
                    f"–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}' –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'",
                    "update_success"
                )
                await processing_msg.edit_text(f"üîÑ {response}")
            else:
                await processing_msg.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç '{project_name}' –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            await processing_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
    
    async def _handle_query_projects(self, intent_analysis: Dict[str, Any], processing_msg: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö"""
        try:
            query_type = intent_analysis.get('query_type')
            filters = intent_analysis.get('filters', {})
            
            projects = []
            
            if query_type == 'by_status':
                status = filters.get('status')
                projects = await self.notion.get_projects_by_status(status)
            elif query_type == 'by_type':
                project_type = filters.get('type')
                projects = await self.notion.get_projects_by_type(project_type)
            else:
                projects = await self.notion.get_all_projects()
            
            if not projects:
                await processing_msg.edit_text("–ü–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é OpenAI
            response = await self.openai.format_projects_response(projects, query_type)
            await processing_msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            await processing_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.")
    
    async def _handle_general_chat(self, intent_analysis: Dict[str, Any], processing_msg: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message = intent_analysis.get('message', '')
            response = await self.openai.generate_response(message, "general_chat")
            await processing_msg.edit_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await processing_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    def _get_status_emoji(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        emoji_map = {
            'Idea': 'üí°',
            'In Progress': 'üî•',
            'Paused': '‚è∏Ô∏è',
            'Completed': '‚úÖ',
            'Released': 'üöÄ',
            'Archived': 'üì¶'
        }
        return emoji_map.get(status, 'üìã')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = PerukuaBot()
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
    application = Application.builder().token(bot.config.TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("projects", bot.projects_command))
    application.add_handler(CommandHandler("active", bot.active_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.VOICE, bot.handle_voice_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ü–µ—Ä—É–∫—É–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

